'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TARGET_ALL_REDUCERS = exports.TARGET_ALL_OPTION_KEY = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isTargetAllAction = isTargetAllAction;
exports.applyToAll = applyToAll;
exports.isTargetAllKey = isTargetAllKey;
exports.mapReducer = mapReducer;
exports.mapReducerFactory = mapReducerFactory;
exports.default = mapReducers;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _actionOptions = require('./actionOptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Action marked as TARGET_ALL_OPTION_KEY bypass key:reducer relationship at map reducers
// and dispatch action to all mapped reducers.
var TARGET_ALL_OPTION_KEY = exports.TARGET_ALL_OPTION_KEY = 'targetAll';
// If key selector returns TARGET_ALL_REDUCERS value, all mapped reducers will be activated
var TARGET_ALL_REDUCERS = exports.TARGET_ALL_REDUCERS = 'TARGET_ALL';

function validateKeySelector(keySelector) {
  if (!_lodash2.default.isFunction(keySelector)) {
    if (!_lodash2.default.isString(keySelector)) {
      throw new Error('KeySelector argument should be a function or a string');
    }
    if (_lodash2.default.isEmpty(keySelector)) {
      throw new Error('KeySelector argument is empty string.');
    }
  }
}

function resolveKey(action, keySelector) {
  var resolvedKey = _lodash2.default.isFunction(keySelector) ? keySelector(action) : _lodash2.default.get(action, keySelector);

  return resolvedKey || TARGET_ALL_REDUCERS;
}

/**
 * Calculates new state for all keys applying reducer resolved based on key,
 * if state is not modified returns same state instance
 * @param state - redux state
 * @param action - redux action
 * @param resolveReducer - returns reducer based on state key
 * @returns {*} state - new or identical instance based on changes
 */
function calculateNewStateForAllKeys(state, action, resolveReducer) {
  var newState = _lodash2.default.mapValues(state, function (stateForKey, key) {
    var reducer = resolveReducer(key) || _lodash2.default.identity;
    return reducer(stateForKey, action);
  });

  if ((0, _shallowequal2.default)(state, newState)) {
    return state;
  }
  return newState;
}

/**
 * Calculates new state applying reducer on substate
 * based on provided key if state is not modified
 * returns same state instance
 * @param state - redux state
 * @param action - redux action
 * @param key - select substate to apply reducer
 * @param reducer - redux reducer function
 * @returns {*} state - new or identical instance based on changes
 */
function calculateNewStateForKey(state, action, key, reducer) {
  var stateForKey = state[key];
  var newStateForKey = reducer(stateForKey, action);

  if (_lodash2.default.eq(stateForKey, newStateForKey)) {
    return state;
  }

  return _extends({}, state, _defineProperty({}, key, newStateForKey));
}

function isTargetAllAction(action) {
  var actionOptions = (0, _actionOptions.getActionOptions)(action);
  return _lodash2.default.get(actionOptions, TARGET_ALL_OPTION_KEY);
}

function applyToAll(action) {
  return (0, _actionOptions.setActionOption)(action, TARGET_ALL_OPTION_KEY, true);
}

function isTargetAllKey(keyValue) {
  return keyValue === TARGET_ALL_REDUCERS;
}

function mapReducer(keySelector, reducer) {
  validateKeySelector(keySelector);

  return function () {
    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var action = arguments[1];

    var key = resolveKey(action, keySelector);
    if (!key) {
      return state;
    }

    var targetAllKey = isTargetAllKey(key);
    var targetAllAction = isTargetAllAction(action);

    if (targetAllAction || targetAllKey) {
      return calculateNewStateForAllKeys(state, action, function () {
        return reducer;
      });
    }

    return calculateNewStateForKey(state, action, key, reducer);
  };
}

function mapReducerFactory(keySelector, reducerFactory) {
  var reducers = {};
  validateKeySelector(keySelector);

  return function () {
    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var action = arguments[1];

    var key = resolveKey(action, keySelector);
    if (!key) {
      return state;
    }

    var targetAllKey = isTargetAllKey(key);
    var targetAllAction = isTargetAllAction(action);

    if (targetAllAction || targetAllKey) {
      return calculateNewStateForAllKeys(state, action, function (stateKey) {
        return reducers[stateKey];
      });
    }

    reducers[key] = reducers[key] || reducerFactory(key);
    var reducer = reducers[key];

    return calculateNewStateForKey(state, action, key, reducer);
  };
}

/**
 * MapReducers is composer that enables applying reducer on substate that is selected based
 * on key. Key is selected from action based on keySelector. It allows for one reducer to be
 * applied to substate depending on key in action or to dynamically create reducer for each
 * key and apply it on substate.
 * @param keySelector is function that returns key or path to key in action
 * @param reducer can be normal redux reducer or reducer factory. In either way defined or
 * created reducer is applied to part of state under key defined in action. Reducer factory
 * is function that receives key and returns reducer function. In that way enabling to create
 * dynamic reducers for different keys.
 * @returns {Function}
 */
function mapReducers(keySelector, reducer) {
  var result = reducer(undefined, {});
  if (_lodash2.default.isFunction(result)) {
    return mapReducerFactory(keySelector, reducer);
  }

  return mapReducer(keySelector, reducer);
}