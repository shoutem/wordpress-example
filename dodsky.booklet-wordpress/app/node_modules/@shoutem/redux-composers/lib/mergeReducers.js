'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeReducers;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Merges the state returned by multiple reducers. Each reducer will receive the
 * previous state from the store. The final state will be calculated by performing
 * a deep merge of all of the states returned by reducers.
 * @param reducers: Order of reducers in array defines the order of merging states returned by reducers.
 * @returns {Function}: A reducer that invokes every reducer inside the reducers array, and constructs
 * a state object or array by deep merging states returned by reducers.
 */
function mergeReducers(reducers) {
  var merger = arguments.length <= 1 || arguments[1] === undefined ? _lodash2.default.merge : arguments[1];

  return function (state, action) {
    var nextStates = reducers.map(function (reducer) {
      return reducer(state, action);
    });
    var nextChangedStates = _lodash2.default.filter(nextStates, function (nextState) {
      return nextState !== state && !_lodash2.default.isEmpty(nextState);
    });

    if (_lodash2.default.isEmpty(nextChangedStates)) {
      return state;
    }

    var defaultState = _lodash2.default.cloneDeep(state);
    return merger.apply(undefined, [defaultState].concat(_toConsumableArray(nextChangedStates)));
  };
}