'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ACTION_OPTIONS_KEY = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.addActionOptions = addActionOptions;
exports.setActionOption = setActionOption;
exports.getActionOptions = getActionOptions;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Action options are additional reserved property for saving
 * redux composers actions settings.
 *
 * @type {string}
 */
var ACTION_OPTIONS_KEY = exports.ACTION_OPTIONS_KEY = 'actionOptions';

/**
 * Mutates action by adding `actionOptions` to the `action.meta`.
 * @param action
 * @param actionOptions
 */
function addActionOptions(action) {
  var actionOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (!_lodash2.default.isPlainObject(action)) {
    throw Error('Invalid action, can not add action options to the ' + (typeof action === 'undefined' ? 'undefined' : _typeof(action)) + '.' + 'Action must be an object!');
  }
  if (!_lodash2.default.isPlainObject(actionOptions)) {
    throw Error('Action options must be an object, error for action type ' + action.type);
  }
  _lodash2.default.set(action, ['meta', ACTION_OPTIONS_KEY], actionOptions);
}

function setActionOption(action, option, value) {
  var actionOptions = getActionOptions(action);
  if (!actionOptions) {
    addActionOptions(action);
    actionOptions = getActionOptions(action);
  }
  _lodash2.default.set(actionOptions, option, value);
  return action;
}

function getActionOptions(action) {
  return _lodash2.default.get(action, ['meta', ACTION_OPTIONS_KEY]);
}