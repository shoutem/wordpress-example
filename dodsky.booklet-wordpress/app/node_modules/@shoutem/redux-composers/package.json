{
  "_args": [
    [
      {
        "raw": "@shoutem/redux-composers@^0.1.5",
        "scope": "@shoutem",
        "escapedName": "@shoutem%2fredux-composers",
        "name": "@shoutem/redux-composers",
        "rawSpec": "^0.1.5",
        "spec": ">=0.1.5 <0.2.0",
        "type": "range"
      },
      "/Users/domagoj/Desktop/projects/BookLet/extensions/dodsky.booklet-wordpress/app"
    ]
  ],
  "_from": "@shoutem/redux-composers@>=0.1.5 <0.2.0",
  "_id": "@shoutem/redux-composers@0.1.5",
  "_inCache": true,
  "_location": "/dodsky.booklet-wordpress/@shoutem/redux-composers",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redux-composers-0.1.5.tgz_1500752477037_0.1774397362023592"
  },
  "_npmUser": {
    "name": "shoutem-manager",
    "email": "npm@shoutem.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@shoutem/redux-composers@^0.1.5",
    "scope": "@shoutem",
    "escapedName": "@shoutem%2fredux-composers",
    "name": "@shoutem/redux-composers",
    "rawSpec": "^0.1.5",
    "spec": ">=0.1.5 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/dodsky.booklet-wordpress"
  ],
  "_resolved": "https://registry.npmjs.org/@shoutem/redux-composers/-/redux-composers-0.1.5.tgz",
  "_shasum": "5454ed05405b25b438926ee28139035171c52521",
  "_shrinkwrap": null,
  "_spec": "@shoutem/redux-composers@^0.1.5",
  "_where": "/Users/domagoj/Desktop/projects/BookLet/extensions/dodsky.booklet-wordpress/app",
  "author": {
    "name": "Vedran Ivanac",
    "email": "vedran@shoutem.com",
    "url": "https://github.com/vedrani"
  },
  "bugs": {
    "url": "https://github.com/shoutem/redux-composers/issues"
  },
  "contributors": [
    {
      "name": "Å½eljko Rumenjak",
      "email": "zeljko@shoutem.com",
      "url": "https://github.com/zrumenjak"
    }
  ],
  "dependencies": {
    "lodash": "^4.13.1",
    "shallowequal": "^1.0.2"
  },
  "description": "Reducers you can use for composing reducer hierarchy like with combineReducers from redux",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-core": "^6.9.1",
    "babel-eslint": "^6.0.0",
    "babel-plugin-transform-object-rest-spread": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.3.13",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "eslint": "^2.11.1",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-flow-vars": "^0.4.0",
    "eslint-plugin-import": "^1.8.1",
    "eslint-plugin-jsx-a11y": "^1.3.0",
    "eslint-plugin-react": "^5.1.1",
    "estraverse-fb": "^1.3.1",
    "isparta": "^4.0.0",
    "istanbul": "0.4.4",
    "mocha": "^2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "5454ed05405b25b438926ee28139035171c52521",
    "tarball": "https://registry.npmjs.org/@shoutem/redux-composers/-/redux-composers-0.1.5.tgz"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/shoutem/redux-composers",
  "keywords": [
    "redux",
    "combineReducers",
    "reducer",
    "reducers",
    "override",
    "extend",
    "pipeline",
    "map"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sohotsoup",
      "email": "3.14wee@gmail.com"
    },
    {
      "name": "mrbr",
      "email": "lbracano@gmail.com"
    },
    {
      "name": "vunovati",
      "email": "vladimir.adamic@gmail.com"
    },
    {
      "name": "shoutem-manager",
      "email": "npm@shoutem.com"
    }
  ],
  "name": "@shoutem/redux-composers",
  "optionalDependencies": {},
  "readme": "redux-composers\r\n====================\r\n\r\n_Redux-composers_ package introduces additional reducer composers besides \r\n[`combineReducers`](http://redux.js.org/docs/api/combineReducers.html) from [redux](https://github.com/reactjs/redux),\r\nwhich enable to compose hierarchy in different ways. We introduce 3 additional composer reducers: `chainReducers`,\r\n`mergeReducers` and `mapReducers`.\r\n\r\nBy definition, reducer composer is a function that turns multiple reducers into\r\nsingle reducer. Each type of composer manages state and reducers in different way, enabling you to build various\r\nhierarchies. Composers can be used in various use cases and combinations with other reducers.\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install @shoutem/redux-composers --save\r\n```\r\n\r\n## Composers\r\n\r\n### `chainReducers(reducers)`\r\nChain array of reducers, each reducer receiving state returned by the previous reducer. The final state will be state\r\nreturned by the last reducer in the chain. Used for responding to new actions, extending and overriding existing\r\nactions, adding generic sorting and filtering capabilities, and grouping reducers.\r\n\r\n###### Arguments\r\n`reducers` (*Array*): Order of reducers execution in chain is defined by array. Each reducer should:\r\n\r\n* return same type of state as rest of reducers in array\r\n* take into account that other reducers in array can modify state\r\n\r\n###### Returns\r\n(*Function*): A reducer that invokes every reducer inside the `reducers` array in chain order, and constructs a state\r\nobject or array depending on nature of `reducers`.\r\n\r\n###### Example\r\n\r\n```javascript\r\nfunction todos(state = [], action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [...state, action.text])\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// extending reducer with new functionality\r\nfunction todosRemove(state = [], action) {\r\n  switch (action.type) {\r\n    case 'REMOVE_FINISHED_TODOS':\r\n      return _.filter(state, (todo) => !todo.isFinished)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// generic sort reducer that can be used to sort any array\r\nfunction sort(state = [], action) {\r\n  if(!action.meta || !action.sortBy) {\r\n    return state;\r\n  }\r\n  \r\n  const sortBy = action.meta.sortBy;\r\n  const direction = action.meta.sortDirection || 'asc';\r\n  \r\n  return _.orderBy(state, sortBy, direction);  \r\n}\r\n\r\nexport default chainReducers([todos, todosRemove, sort])\r\n```\r\n\r\n### `mergeReducers(reducers, merger = _.merge)`\r\nMerges the states returned by each reducer. Used for responding to new actions, extending and overriding existing\r\nactions, adding generic sorting and filtering capabilities, and grouping reducers.\r\n\r\n###### Arguments\r\n`reducers` (*Array*): Order of reducers in array defines the order of merging states returned by reducers. Each reducer\r\nshould:\r\n\r\n* return same type of state as rest of reducers in array\r\n* take into account that other reducers in array can modify state\r\n\r\n`merger` (*Function*): Optional argument defines method of merging new states produced by reducers. By default `_.merge`\r\nis used, but you can use for example `_.assign` or any other function with same signature as `function(object, [sources])`.\r\n\r\n###### Returns\r\n(*Function*): A reducer that invokes every reducer inside the `reducers` array with original state and constructs a\r\nstate object or array by deep merging states returned by reducers. The final new state will be calculated by performing\r\na merge of all of the states returned by reducers with cloned instance of original state (cloning is performed only in\r\ncase if any reducer returns new state).\r\n\r\n###### Example\r\n\r\n```javascript\r\nfunction todos(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO': {\r\n      const { id, text } = action;\r\n      return {\r\n        [id]: { id, text },\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// upperCase first letter in text\r\nfunction upperTodos = [], action) {\r\n  switch (action.type) {\r\n    case 'ADD_TODO': {\r\n      const { id, text } = action;\r\n      const upperText = _.upperFirst(text);\r\n      return [        \r\n        [id]: { id, upperText },\r\n      ]);\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//result will be state with objects with this signature [id]: { id, text, upperText }\r\nexport default mergeReducers([todos, upperTodos])\r\n```\r\n\r\n### `mapReducers(keySelector, reducer)`\r\nMapReducers is composer that applies `reducer` on substate that is selected based on key. Key is selected from\r\naction based on `keySelector`. `mapReducers` can be used when you have need for multiple instances of state, but you\r\nwant to apply changes only on instance with same key as key in action. Uses map as data structure.\r\n\r\n###### Arguments\r\n`keySelector` (*Function|String*): It can be a function or string. Function should be defined as `keySelector(action)`\r\nwhere function returns key extracted from `action`. You can also pass string which defines path to property in `action`.\r\nPath can be defined in every convention that `_.get` understands from `lodash` library. If key doesn't exists in state\r\nthen `undefined` is passed to reducer as state argument and newly produced result from reducer is saved in the state\r\nunder the reducer's key. Returning `undefined` or `TARGET_ALL_REDUCERS` constant from `keySelector` will pass the action\r\nto all reducers. \r\n\r\n`reducer` (*Function*): Applied to substate under key defined with `keySelector`. Can be normal redux reducer or reducer \r\nfactory. In either way, defined or created reducer is applied to part of state under key defined in action. Reducer factory\r\nis function that receives key and returns reducer function. In that way enabling to create dynamic reducers for \r\ndifferent keys.\r\n###### Returns\r\n(*Function*): A reducer that invokes reducer on substate defined with key extracted from action.\r\n\r\n###### Example\r\n\r\n```javascript\r\n// map of todo objects\r\nfunction todo(state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return {\r\n        id: action.id,\r\n        text: action.text,\r\n        completed: false\r\n      };    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default mapReducers('id', todo)\r\n```\r\n\r\n```javascript\r\n// list of todos ids per category\r\nfunction todoIds(state= [], action) => {\r\n  switch (action.type) {\r\n     case 'ADD_TODO':\r\n       return [...state, action.id];\r\n     default:\r\n       return state;\r\n  }\r\n};\r\n}\r\nexport default mapReducers('meta.categoryId', todoIds)\r\n```\r\n\r\n## Test\r\n\r\n```\r\n$ npm run test\r\n```\r\n\r\n## License\r\n\r\n[The BSD License](https://opensource.org/licenses/BSD-3-Clause)\r\nCopyright (c) 2016-present, [Shoutem](http://shoutem.github.io)\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/shoutem/redux-composers.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "coverage": "babel-node node_modules/isparta/bin/isparta cover --report text --report html node_modules/mocha/bin/_mocha -- -R spec --recursive test",
    "lint": "eslint src test",
    "test": "mocha --require babelTestSetup --reporter spec --recursive test"
  },
  "version": "0.1.5"
}
